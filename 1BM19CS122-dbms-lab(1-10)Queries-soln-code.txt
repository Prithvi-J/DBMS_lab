NAME:PRITHVI.J
USN:IBM19CS122
COURSE:DBMS

DBMS LAB RECORD

PROGRAM 1: INSURANCE DATABASE

Consider the Insurance database given below. The data types are specified.

PERSON (driver_id: String, name: String, address: String)

CAR (reg_num: String, model: String, year: int)

ACCIDENT (report_num: int, accident_date: date, location: String)

OWNS (driver_id: String, reg_num: String)

PARTICIPATED (driver_id: String,reg_num: String, report_num: int, damage_amount: int)

queries executed:
i)Demonstrate how you
a.Update the damage amount to 25000 for the car with a specific reg-num for which the accident report number was 12.
>UPDATE PARTICIPATED
SET DAMAGE_AMOUNT=25000
WHERE REG_NO='KA37 0014' AND REPORT_NUMBER='0012'

b.Add a new accident to the database.
>INSERT INTO ACCIDENT
VALUES('0020','2008-01-21','BELLARY');

c)Find the total number of people who owned cars that involved in accidents in 2008.
>SELECT COUNT(*) FROM ACCIDENT
 WHERE DATE BETWEEN '2008-01-01' AND '2008-12-31'

d)Find the number of accidents in which cars belonging to a specific model were
involved.
>SELECT COUNT(*) FROM PARTICIPATED WHERE REG_NO
IN (SELECT REG_NO FROM CAR WHERE MODEL='RENAULT TRIBER');
___________________________________________________________________________
Lab2 Program

INSURENCE DATABASE

Consider the following database for a banking enterprise.

Branch (branch-name: String, branch-city: String, assets: real)

BankAccount(accno: int, branch-name: String, balance: real)

BankCustomer (customer-name: String, customer-street: String, customer-city: String)

Depositer(customer-name: String, accno: int)

Loan (loan-number: int, branch-name: String, amount: real)
 
QUERIES EXECUTED:

1. LIST THE ENTIRE LOAN RELATION IN THE DESCENDING ORDER OF AMOUNT. 

SELECT * FROM LOAN ORDER BY AMOUNT DESC;

2. FIND ALL CUSTOMERS HAVING A LAON, AN ACCOUNT OR BOTH AT THE BANK

(SELECT CUSTOMERNAME FROM DEPOSITOR ) UNION (SELECT CUSTOMERNAME FROM BORROWER);

3. CREATE A VIEW WHICH GIVES EACH BRANCH THE SUM OF THE AMOUNT OF ALL THE LOANS AT THE BRANCH.

CREATE VIEW BRANCHTOTALLOAN (BRANCHNAME, TOTALLOAN) AS SELECT BRANCHNAME, SUM(AMOUNT) FROM LOAN GROUP BY BRANCHNAME;

4. THE ANNUAL INTEREST PAYMENTS ARE MADE AND ALL BRANCHES ARE TO BE INCREASED BY 5%.

UPDATE ACCOUNT SET BALANCE=BALANCE *2.05;

5. LIST THE ENTIRE LOAN RELATION IN THE ASCENDING ORDER OF AMOUNT. 

SELECT * FROM LOAN ORDER BY AMOUNT ASCE;

____________________________________________________________________________
LAB PROGRAM 3

SUPPLIER DATABASE

Consider the following schema:

SUPPLIERS (sid: integer, sname: string, address: string)

PARTS (pid: integer, pname: string, color: string)

CATALOG (sid: integer, pid: integer, cost: real)

queries executed:
The Catalog relation lists the prices charged for parts by Suppliers. Write the following queries in SQL: 
i. Find the pnames of parts for which there is some supplier.
>SELECT DISTINCT P.pname
FROM Parts P, Catalog C
WHERE P.pid = C.pid

ii. Find the snames of suppliers who supply every part.
>SELECT S.sname
FROM Suppliers S
WHERE NOT EXISTS (( SELECT P.pid
FROM Parts P )
EXCEPT
( SELECT C.pid
FROM Catalog C
WHERE C.sid = S.sid ))

iii. Find the snames of suppliers who supply every red part.
>SELECT S.sname
FROM Suppliers S
WHERE NOT EXISTS (( SELECT P.pid
FROM Parts P
WHERE P.color = ‘Red’ )
EXCEPT
( SELECT C.pid
FROM Catalog C, Parts P
WHERE C.sid = S.sid AND
C.pid = P.pid AND P.color = ‘Red’ ))

iv. Find the pnames of parts supplied by Acme Widget Suppliers and by no one else.
>SELECT P.pname
FROM Parts P, Catalog C, Suppliers S
WHERE P.pid = C.pid AND C.sid = S.sid
AND S.sname = ‘Acme Widget Suppliers’
AND NOT EXISTS ( SELECT *
FROM Catalog C1, Suppliers S1
WHERE P.pid = C1.pid AND C1.sid = S1.sid AND
S1.sname <> ‘Acme Widget Suppliers’ )

v. Find the sids of suppliers who charge more for some part than the average cost of that part (averaged over  all the suppliers who supply that part).
>SELECT DISTINCT C.sid
FROM Catalog C
WHERE C.cost > ( SELECT AVG (C1.cost)
FROM Catalog C1
WHERE C1.pid = C.pid )

vi. For each part, find the sname of the supplier who charges the most for that part.
>SELECT P.pid, S.sname
FROM Parts P, Suppliers S, Catalog C
WHERE C.pid = P.pid
AND C.sid = S.sid
AND C.cost = (SELECT MAX (C1.cost)
FROM Catalog C1
WHERE C1.pid = P.pid)

vii. Find the sids of suppliers who supply only red parts.
>SELECT DISTINCT C.sid
FROM Catalog C
WHERE NOT EXISTS ( SELECT *
FROM Parts P
WHERE P.pid = C.pid AND P.color <> ‘Red’ )
___________________________________________________________________________________________________

Lab PROGRAM 4
 
STUDENT FACULTY DATABASE

Consider the following database for
student enrollment for course :

STUDENT(snum: integer, sname:
string, major: string, lvl: string, age: integer)

CLASS(cname: string, meets
at: time, room: string, fid: integer)

ENROLLED(snum: integer, cname:
string)

FACULTY(fid: integer, fname:
string, deptid: integer)

 The meaning of these relations is
straightforward; for example, Enrolled has one record per student-class pair
such that the student is enrolled in the class. Level(lvl) is a two character
code with 4 different values (example: Junior: JR etc)

Write the following queries in SQL.
No duplicates should be printed in any of the answers.
i.                
Find
the names of all Juniors (level = JR) who are enrolled in a class taught by harshita
>SELECT DISTINCT s.sname
	FROM student s,class c,faculty f,enrolled e
	WHERE  s.snum=e.snum      AND
	       e.cname=c.cname    AND
       	   s.level='jr'   AND
	       f.fname='Harshith' AND
	       f.fid=c.fid;
ii.              
Find
the names of all classes that either meet in room R128 or have five or more
Students enrolled.
>SELECT DISTINCT cname
	FROM class
	WHERE room='room128'
	OR
	cname IN (SELECT e.cname FROM enrolled e GROUP BY e.cname HAVING COUNT(*)>=5);

iii.            
Find
the names of all students who are enrolled in two classes that meet at the same
time.
>SELECT DISTINCT s.sname
	FROM student s
	WHERE s.snum IN (SELECT e1.snum
				FROM enrolled e1,enrolled e2,class c1,class c2
				WHERE e1.snum=e2.snum   AND
				e1.cname<>e2.cname      AND
		  	        e1.cname=c1.cname       AND
			        e2.cname=c2.cname       AND
			        c1.meets_at=c2.meets_at  );

iv.            
Find
the names of faculty members who teach in every room in which some class is
taught.
> SELECT f.fname,f.fid
			FROM faculty f
	     	WHERE f.fid in ( SELECT fid FROM class
			GROUP BY fid HAVING COUNT(*)=(SELECT COUNT(DISTINCT room) FROM class) );

v.              
Find
the names of faculty members for whom the combined enrollment of the courses
that they teach is less than five.
>SELECT DISTINCT f.fname
	FROM faculty f
	WHERE f.fid IN (  SELECT c.fid
			  FROM class c, enrolled e
			  WHERE c.cname = e.cname GROUP BY c.cname HAVING COUNT(c.cname)< 5 );

vi.            
Find
the names of students who are not enrolled in any class.
>SELECT DISTINCT S.sname
FROM Student S
WHERE S.snum NOT IN (SELECT E.snum
FROM Enrolled E )


vii.           
For
each age value that appears in Students, find the level value that appears most
often. For example, if there are more FR level students aged 18 than SR, JR, or
SO students aged 18, you should print the pair (18, FR).
>SELECT S.age, S.level
FROM Student S
GROUP BY S.age, S.level,
HAVING S.level IN (SELECT S1.level
FROM Student S1
WHERE S1.age = S.age
GROUP BY S1.level, S1.age
HAVING COUNT (*) >= ALL (SELECT COUNT (*)
FROM Student S2
WHERE s1.age = S2.age
GROUP BY S2.level, S2.age))
______________________________________________________________________________________________

LAB PROGRAM 5

AIRLINE FLIGHT DATABASE

Consider the following database that
keeps track of airline flight information:

FLIGHTS(flno: integer, from:
string, to: string, distance: integer, departs: time, arrives: time, price:
integer)

AIRCRAFT(aid: integer,
aname: string, cruisingrange: integer)

CERTIFIED(eid: integer, aid:
integer)

EMPLOYEES(eid: integer,
ename: string, salary: integer)

Note that the Employees relation
describes pilots and other kinds of employees as well; Every pilot is certified
for some aircraft, and only pilots are certified to fly.

Write each of the following queries
in SQL.
i.                
Find
the names of aircraft such that all pilots certified to operate them have
salaries more than Rs.80,000.
>SELECT DISTINCT a.aname
    FROM aircraft a,certified c,employees e
    WHERE a.aid=c.aid
    AND c.eid=e.eid
    AND NOT EXISTS
    (SELECT *
    FROM employees e1
    WHERE e1.eid=e.eid
    AND e1.salary<80000);


ii.              
For
each pilot who is certified for more than three aircrafts, find the eid and the
maximum cruisingrange of the aircraft for which she or he is certified.
>SELECT c.eid,MAX(cruisingrange)
  FROM certified c,aircraft a
  WHERE c.aid=a.aid
  GROUP BY c.eid
  HAVING COUNT(*)>3;

iii.            
Find
the names of pilots whose salary is less than the price of the cheapest route
from Bengaluru to Frankfurt.
 >SELECT DISTINCT e.ename
     FROM employees e
     WHERE e.salary<
     (SELECT MIN(f.price)
     FROM flight f
     WHERE f.frm='Bangalore'
     AND f.too='Frankfurt');

iv.            
For
all aircraft with cruisingrange over 1000 Kms, find the name of the aircraft
and the average salary of all pilots certified for this aircraft.
>SELECT a.aid,a.aname,AVG(e.salary)
    - FROM aircraft a,certified c,employees e
     WHERE a.aid=c.aid
     AND c.eid=e.eid
     AND a.cruisingrange>1000
     GROUP BY a.aid,a.aname;

v.              
Find
the names of pilots certified for some Boeing aircraft.
>SELECT distinct e.ename
     FROM employees e,aircraft a,certified c
     WHERE e.eid=c.eid
     AND c.aid=a.aid
     AND a.aname='Boeing';

vi.            
Find
the aids of all aircraft that can be used on routes from Bengaluru to New
Delhi.
> SELECT a.aid
     FROM aircraft a
     WHERE a.cruisingrange>
     (SELECT MIN(f.distance)
     FROM flight f
     WHERE f.frm='Bangalore'
     AND f.too='Delhi');
     

vii.           
A
customer wants to travel from Madison to New York with no more than two changes
of flight. List the choice of departure times from Madison if the customer
wants to arrive in New York by 6 p.m.
>SELECT F.departs
FROM Flights F
WHERE F.flno IN ( ( SELECT F0.flno
 FROM Flights F0
 WHERE F0.from = ‘Madison’ AND F0.to = ‘New York’
 AND F0.arrives < ‘18:00’ )
 UNION
 ( SELECT F0.flno
 FROM Flights F0, Flights F1
 WHERE F0.from = ‘Madison’ AND F0.to <> ‘New York’
 AND F0.to = F1.from AND F1.to = ‘New York’
 AND F1.departs > F0.arrives
 AND F1.arrives < ‘18:00’ )
 UNION
 ( SELECT F0.flno
 FROM Flights F0, Flights F1, Flights F2
 WHERE F0.from = ‘Madison’
 AND F0.to = F1.from
 AND F1.to = F2.from
 AND F2.to = ‘New York’
 AND F0.to <> ‘New York’
 AND F1.to <> ‘New York’
 AND F1.departs > F0.arrives
 AND F2.departs > F1.arrives
 AND F2.arrives < ‘18:00’ ))
____________________________________________________________________________________________
 lab program6

Order Database

Consider the following schema for Order Database:

SALESMAN (Salesman_id,
Name, City, Commission)

CUSTOMER (Customer_id,
Cust_Name, City, Grade, Salesman_id)

ORDERS (Ord_No,
Purchase_Amt, Ord_Date, Customer_id, Salesman_id)

Write SQL queries to

1.count the customers with grades above Bangalore's average

select count(customer_name) from Customer where grade > (select avg(grade)
from Customer where city = 'Bangalore');

2.Find the name and numbers of all salesmen who had more than one customer

select distinct c.salesman_id,s.salesman_name from Customer c,Salesman s
where c.salesman_id = s.salesman_id
and 1 < (select count(customer_id) from Customer where salesman_id =
c.salesman_id);

3.List all salesmen and indicate those who have and dont have customers in their city

select s.salesman_name,c.customer_name from Salesman s,Customer c
where s.salesman_id = c.salesman_id and c.city = s.city
union
select s.salesman_name,'No Match' from Salesman s,Customer c
where s.salesman_id = c.salesman_id and c.city != s.city;

4.create a view that finds the salesman who has the customer with the highest order of the day

create view salesman_view as select o.order_date,salesman_id,sum(o.purchase_amt)
 from Orders o group by order_date having sum(purchase_amt) = (select max(sum(purchase_amt)) 
from Customer where order_date = o.order_date and salesman_id = o.salesman_id);

5.delete salesman with id 1000 

delete from Salesman where salesman_id = 1000;
select * from Salesman; select * from Orders;
___________________________________________________________________________________________________

lab program7

BOOK DEALER DATABASE
The following tables are maintained by a book dealer:

AUTHOR(author-id: int, name: String, city: String, country: String)

PUBLISHER(publisher-id: int, name: String, city: String, country: 

CATALOG (book-id: int, title: String, author-id: int, publisher-id: int, category-id: int, year: int, price: int)

CATEGORY(category-id: int, description: String)

ORDER-DETAILS(order-no: int, book-id: int, quantity: int)

QUERIES EXECUTED
1.Give the details of the authors who have 2 or more books in the catalog and the price of the books in the 
catalog and the year of publication is after 2000.

select a.author_id,a.author_city,a.author_name,a.author_city
from author a join catalog c on a.author_id=c.author_id where
year>2000 and c.author_id in(select c.author_id from catalog having
count(c.author_id)>2 and price>500 );

2.Find the author of the book which has maximum sales.
select a.author_id from author a join catalog c on
a.author_id=c.author_id join orderdetails o on c.book_id=o.book_id
having max(o.quantity);

3. Demonstrate how you increase the price of books published by a specific publisher by 10%.
update catalog set price=(0.1*price)+price where publisher_id=2001;
select * from catalog;
commit;
_________________________________________________________________________________________-

lab program8

STUDENT ENROLLMENT DATABASE

Consider the following database of student enrollment in courses and books adopted for each course.

STUDENT (regno: String, name: String, major: String, bdate: date)

COURSE (course #: int, cname: String, dept: String)

ENROLL (regno: String, cname: String, sem: int, marks: int)

BOOK_ADOPTION (course #: int, sem: int, book-ISBN: int)

TEXT(book-ISBN:int, book-title:String, publisher:String, author:String)

QUERIES EXECUTED
01. Demonstrate how you add a new text book to the database
and make this book be adopted by some department */

INSERT INTO text (book_isbn, book_title, publisher,author) VALUES (23,'ADA','PEARSON','SCHIELD');
SELECT * FROM TEXT;
INSERT INTO book_adoption (courseno,sem,book_isbn) VALUES (111,5,23);
SELECT * FROM BOOK_ADOPTION;

02. Produce a list of text books [include course #, Book ISBN, Book title] in the alphabetical order for courses offered by
the ‘CS’ department that use more than two books. STUDENT ENROLLMENT DATABASE*/

SELECT c.courseno,t.book_isbn,t.book_title
FROM course c,book_adoption ba,text t
WHERE c.courseno=ba.courseno
AND ba.book_isbn=t.book_isbn
AND c.dept='CSE'
AND 2<( SELECT COUNT(book_isbn)
FROM book_adoption b
WHERE c.courseno=b.courseno)
ORDER BY t.book_title;

*03. List any department that has all its adopted books published by a specific publisher. */
SELECT DISTINCT c.dept FROM course c
WHERE c.dept IN ( SELECT c.dept FROM course
c,book_adoption b,text t WHERE c.courseno=b.courseno
AND t.book_isbn=b.book_isbn AND
t.publisher='PEARSON') AND c.dept NOT IN
(SELECT c.dept FROM course c,book_adoption b,
WHERE c.courseno=b.courseno AND
t.book_isbn=b.book_isbn AND t.publisher =
'PEARSON');

SELECT DISTINCT c.dept FROM course c,book_adoption b,text t
WHERE c.dept IN (select c.dept where c.
_______________________________________________________________________________________________

lab program 9

MOVIE DATABASE

Consider the schema for Movie Database: 

ACTOR(Act_id, Act_Name, Act_Gender) 

DIRECTOR(Dir_id, Dir_Name, Dir_Phone) 

MOVIES(Mov_id, Mov_Title, Mov_Year, Mov_Lang, Dir_id) 

MOVIE_CAST(Act_id, Mov_id, Role) 

RATING(Mov_id, Rev_Stars)

QUERIES EXECUTED                                          
1. List the titles of all movies directed by ‘Hitchcock’.
SELECT M.MOVIE_TITLE FROM MOVIES M,DIRECTOR D WHERE M.DIR_ID=D.DIR_ID 
AND D.DIR_NAME='Alfred Hitchcock';

2. Find the movie names where one or more actors acted in two or more movies.
SELECT M.MOVIE_TITLE FROM ACTOR A,MOVIE_CAST C,MOVIES M WHERE A.ACT_ID=C.ACT_ID AND 
C.MOVIE_ID=M.MOVIE_ID AND A.ACT_ID IN(SELECT ACT_ID FROM MOVIE_CAST GROUP BY ACT_ID HAVING COUNT(*)>=2);    

3. List all actors who acted in a movie before 2000 and also in a movie after 2015 (use JOIN operation).
SELECT A.ACT_NAME FROM ACTOR A 
JOIN MOVIE_CAST MC ON A.ACT_ID=MC.ACT_ID
JOIN MOVIES M ON MC.MOVIE_ID=M.MOVIE_ID 
WHERE M.MOVIE_YEAR NOT BETWEEN 2000 AND 2015;

4. Find the title of movies and number of stars for each movie that has at least one rating and find the highest
-- number of stars that movie received. Sort the result by movie title.
SELECT M.MOVIE_TITLE, MAX(R.RATING_STARS) AS MAXIMUM_RATING FROM MOVIES M, RATING R 
WHERE M.MOVIE_ID = R.MOVIE_ID GROUP BY M.MOVIE_TITLE HAVING COUNT(R.RATING_STARS>=1) ORDER BY M.MOVIE_TITLE;
 
 
5. Update rating of all movies directed by ‘Steven Spielberg’ to 5. 
UPDATE RATING SET RATING_STARS = 5 WHERE MOVIE_ID IN
(SELECT M.MOVIE_ID FROM MOVIES M, DIRECTOR D WHERE M.DIR_ID = D.DIR_ID 
AND D.DIR_NAME='Steven Spielberg');      
SELECT * FROM RATING;
_______________________________________________________________________________________________________________

lab program 10

COLLEGE DATABASE

Consider the schema for College Database:

STUDENT(USN, SName, Address, Phone, Gender) 

SEMSEC(SSID, Sem, Sec) 

CLASS(USN, SSID)
 
SUBJECT(Subcode, Title, Sem, Credits) 

IAMARKS(USN, Subcode, SSID, Test1, Test2, Test3, FinalIA) 

QUERIES EXECUTED
1.List all the student details studying in fourth semester ‘A’ section 
SELECT S.*, SS.SEM, SS.SEC
FROM STUDENT S, SEMSEC SS, CLASS C
WHERE S.USN = C.USN AND SS.SSID = C.SSID AND SS.SEM = 4 AND SS.SEC='A';

2.Compute the total number of male and female students in each semester and in each section
SELECT SS.SEM, SS.SEC, S.GENDER, COUNT(S.GENDER) AS COUNT
FROM STUDENT S, SEMSEC SS, CLASS C
WHERE S.USN = C.USN AND
SS.SSID = C.SSID
GROUP BY SS.SEM, SS.SEC, S.GENDER
ORDER BY SEM;

3.Create a view of Test1 marks of student USN ‘1BI15CS101’ in all subjects 
CREATE VIEW STU_TEST1_MARKS_VIEW
AS
SELECT TEST1, SUBCODE
FROM IAMARKS
WHERE USN = '1RN13CS091';
select * from STU_TEST1_MARKS_VIEW;

4.Categorize students based on the following criterion:
If FinalIA = 17 to 20 then CAT = ‘Outstanding’
If FinalIA = 12 to 16 then CAT = ‘Average’
If FinalIA< 12 then CAT = ‘Weak’
Give these details only for 8th semester A, B, and C section students.
update iamarks set finalia=(test1+test2+test2)/3;

SELECT S.USN,S.SNAME,S.ADDRESS,S.PHONE,S.GENDER,
(CASE
WHEN IA.FINALIA BETWEEN 17 AND 20 THEN 'OUTSTANDING'
WHEN IA.FINALIA BETWEEN 12 AND 16 THEN 'AVERAGE'
ELSE 'WEAK'
END) AS CAT
FROM STUDENT S, SEMSEC SS, IAMARKS IA, SUBJECT SUB
WHERE S.USN = IA.USN AND
SS.SSID = IA.SSID AND
SUB.SUBCODE = IA.SUBCODE AND
SUB.SEM = 8;
commit
_______________________________________________________________________________________________